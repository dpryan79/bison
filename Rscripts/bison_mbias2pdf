#!/usr/bin/env Rscript
suppressMessages(require(ggplot2))

#Agresti-Coull confidence interval
CI <- function(df, which = 0) {
    X = df$nMethylated
    N = df$nMethylated + df$nUnmethylated
    Z = qnorm(1-0.5*min_p)
    Z_squared = Z*Z
    N_dot = N + Z_squared
    P_dot = (1/N_dot)*(X+0.5*Z_squared)
    if(which == 0) {
        P_dot - Z*sqrt((P_dot/N_dot)*(1-P_dot))
    } else {
        P_dot + Z*sqrt((P_dot/N_dot)*(1-P_dot))
    }
}

usage <- function() {
    cat("Usage: bison_mbias2pdf [OPTIONS] output_from_bison_mbias.txt

    Given the output of bison_mbias, graph it in R and estimate what regions to
    ignore when extracting methylation. The graph includes the average
    methylation level at each position as well as the (by default) 99.9%
    confidence intervals, which are semi-transparent. Changing the -p value
    changes the confidence intervals accordingly. Vertical lines may be drawn at
    the bounds of the region suggested for inclusion in the methylation metrics.
    The appropriate options for the methylation extractor are then printed to
    the screen, for convenience.

    -5  The 5' most bound on the + strand of the region for calculating the
        baseline methylation level. The default is 0.2.

    -3  The 3' most bound on the + strand of the region for calculating the
        baseline methylation level. The default is 0.8.

    -m  Minimum difference from expected methylation level to suggest trimming a
        base. The default is 0.01 (i.e., 1%). Without a minimum, the script
        would output spurious results when minimally biased data is processed.

    -p  Minimum p-value for the test of whether a position's methylation is
        different from expected. The default is 0.001.

    -png Write output to multiple PNG files instead of to PDF.

    -h  Print this message.
")
}

#defaults
left = 0.2
right = 0.8
do_png = 0
f = NULL
min_percent = 0.01
min_p = 0.001
cmd = "" #This will hold the options for the methylation extractor

args = commandArgs(trailingOnly=T)
i=1
while(i<=length(args)) {
    if(args[i] == "-5") {
        i = i+1
        left = as.numeric(args[i])
    } else if(args[i] == "-3") {
        i = i+1
        right = as.numeric(args[i])
    } else if(args[i] == "-m") {
        i = i+1
        min_percent = as.numeric(args[i])
    } else if(args[i] == "-p") {
        i = i+1
        min_p = as.numeric(args[i])
    } else if(args[i] == "-png") {
        do_png=1
    } else if(args[i] == "-h") {
        usage()
        stop()
    } else if(is.null(f)) {
        f = args[i]
    }
    i = i+1
}

if(min_p >= 1) {
    min_p = 0.001
} else if(min_p < 0) {
    min_p = 0.001
}
if(min_percent > 1) {
    min_percent = min_percent/100
    cat(sprintf("-m reset to %f since the original value was > 1!\n", min_percent))
} else if(min_percent < 0) {
    cat(sprintf("-m reset to 0.01 since you specified negative methylation, which makes no sense\n"))
    min_percent = 0.01
}

if(is.null(f)) {
    usage()
    stop()
} else {
    d <- read.delim(f, header=T)
    #Fix some of the columns
    d$Read <- factor(d$Read)
    d$Strand <- relevel(d$Strand, "OT")
    #Calculate methylation
    d$Methylation <- d$nMethylated/(d$nMethylated+d$nUnmethylated)
    #Upper/Lower Confidence Interval
    d$UpperCI <- CI(d, 1)
    d$LowerCI <- CI(d, 0)

    #Determine the output prefix
    prefix = sub("_mbias.txt", "", f)

    if(do_png == 0) {
        cat(sprintf("Output will be written to %s_mbias.pdf\n",prefix))
        pdf(file=sprintf("%s_mbias.pdf", prefix))
    }
    for(lev in levels(d$Strand)) {
        if(do_png == 1) {
            cat(sprintf("Output will be written to %s_%s_mbias.png\n", prefix, lev))
            png(filename=sprintf("%s_%s_mbias.png", prefix, lev))
        }
        #Calculate the cutoffs
        cutoff_inters = c()
        cutoff_types = c()
        cutoff_cols = factor(c(), levels=c("1","2"))
        #read 1
        USE <- intersect(which(d$Strand==lev), which(d$Read == 1))
        lower <- floor(left * max(d$Position[USE]))
        upper <- ceiling(right * max(d$Position[USE]))
        USE2 <- intersect(USE, intersect(which(d$Position >= lower), which(d$Position <= upper)))
        av <- c(mean(d$Methylation[USE2]), min(d$LowerCI[USE2]), max(d$UpperCI[USE2]))
        read1_5 <- 0
        read1_3 <- 0
        #Significantly below
        to_remove <- intersect(which(d$UpperCI[USE] < av[1]), which(d$Methylation[USE] < av[2]))
        #Significantly above
        to_remove <- append(to_remove, intersect(which(d$LowerCI[USE] > av[1]), which(d$Methylation[USE] > av[3])))
        to_remove <- unique(to_remove)
        #Difference threshold
        to_remove <- intersect(to_remove, which(abs(d$Methylation[USE] - av[1]) > min_percent))
        midway = floor(0.5*max(d$Position[USE]))
        #5'
        if(any(d$Position[USE][to_remove] < midway)) {
            read1_5 = d$Position[USE][max(to_remove[which(d$Position[USE][to_remove] < midway)])]+1
            cutoff_inters <- append(cutoff_inters, read1_5)
            cutoff_types <- append(cutoff_types, "L1")
            cutoff_cols <- append(cutoff_cols, "1")
        }
        #3'
        if(any(d$Position[USE][to_remove] >= midway)) {
            read1_3 = d$Position[USE][min(to_remove[which(d$Position[USE][to_remove] >= midway)])]-1
            cutoff_inters <- append(cutoff_inters, read1_3)
            cutoff_types <- append(cutoff_types, "L2")
            cutoff_cols <- append(cutoff_cols, "1")
        }

        #read 2
        USE <- intersect(which(d$Strand==lev), which(d$Read == 2))
        read2_5 <- 0
        read2_3 <- 0
        if(length(USE) > 0) {
            lower <- floor(left * max(d$Position[USE]))
            upper <- ceiling(right * max(d$Position[USE]))
            USE2 <- intersect(USE, intersect(which(d$Position >= lower), which(d$Position <= upper)))
            av <- c(mean(d$Methylation[USE2]), min(d$LowerCI[USE2]), max(d$UpperCI[USE2]))
            #Significantly below
            to_remove <- intersect(which(d$UpperCI[USE] < av[1]), which(d$Methylation[USE] < av[2]))
            #Significantly above
            to_remove <- append(to_remove, intersect(which(d$LowerCI[USE] > av[1]), which(d$Methylation[USE] > av[3])))
            to_remove <- unique(to_remove)
            #Difference threshold
            to_remove <- intersect(to_remove, which(abs(d$Methylation[USE] - av[1]) > min_percent))
            midway = floor(0.5*max(d$Position[USE]))
            #5'
            if(any(d$Position[USE][to_remove] < midway)) {
                read2_5 = d$Position[USE][max(to_remove[which(d$Position[USE][to_remove] < midway)])]+1
                cutoff_inters <- append(cutoff_inters, read2_5)
                cutoff_types <- append(cutoff_types, "L3")
                cutoff_cols <- append(cutoff_cols, "2")
            }
            #3'
            if(any(d$Position[USE][to_remove] >= midway)) {
                read2_3 = d$Position[USE][min(to_remove[which(d$Position[USE][to_remove] >= midway)])]-1
                cutoff_inters <- append(cutoff_inters, read2_3)
                cutoff_types <- append(cutoff_types, "L4")
                cutoff_cols <- append(cutoff_cols, "2")
            }
        }

        #Make the pplot
        USE <- which(d$Strand==lev)
        cutoffs <- data.frame(x=cutoff_inters, types=cutoff_types, cols= cutoff_cols)
        g <- ggplot(d[USE,], aes(x=Position, y=Methylation, ymin=max(min(LowerCI), 0), ymax=min(max(UpperCI), 1), group=Read))
        g <- g + geom_ribbon(aes(ymin=LowerCI, ymax=UpperCI, alpha=0.9, fill=Read))
        g <- g + geom_line(aes(colour=Read))
        g <- g + scale_alpha(guide='none')
        g <- g + scale_colour_discrete(guide='none')
        if(length(unique(d[USE, 2])) == 2) {
            g <- g + scale_fill_discrete(name="Read", labels=c("#1","#2"))
        } else {
            g <- g + scale_fill_discrete(guide='none')
        }
        g <- g + xlab("Position along mapped read (5'->3' of + strand)")
        g <- g + scale_x_continuous(breaks=seq(0, max(d$Position[USE]), 10))
        g <- g + ggtitle(sprintf("%s strand", lev))

        #Add the cutoffs
        if(length(cutoff_inters) > 0) {
            g <- g + geom_vline(data=cutoffs, aes(xintercept=x, colour=cols, linetype=types), show_guide=T)
            g <- g + scale_linetype_discrete(name="Cutoffs", labels=sprintf("%i", cutoffs$x))
            g <- g + guides(fill=guide_legend(override.aes=list(linetype=0)))

            cmd <- sprintf("%s-%s %i,%i,%i,%i ", cmd, lev, read1_5, read1_3, read2_5, read2_3)
        }
        print(g)
        if(do_png == 1) {
            suppressMessages(dev.off())
        }
    }
    if(do_png == 0) {
        suppressMessages(dev.off())
    }
    if(cmd != "") {
        cat(sprintf("Suggested methylation extractor parameters: %s\n", cmd))
    }
}
